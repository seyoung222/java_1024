/*
정규화(Normalization)
- 테이블 간에 중복된 데이터를 허용하지 않기 위해 사용
- 데이터 수정해도 무결성(integrity)를 유지할 수 있으며, DB용량도 줄어듦

- 제1 정규화
  - 다중 속성을 없애줌 : 다중 속성이 안되게 단일 속성으로 바꿔줌
ex)
이름		취미				이름		취미
김연아	영화				김연아	영화
추신수	음악, 쇼핑  ->	추신수	음악
						추신수	쇼핑
- 제2 정규화
  - 제1 정규화를 진행한 테이블에 대해 완전 함수 종족을 만족하도록 테이블을 분해
  - 다른 정보들과는 관련없고 특정 속성에 대해서만 바뀌는 값들이 있을 경우 테이블을 2개로 분리
ex)
(학생번호, 강좌이름, 강의실, 성적)
-> (학생번호, 강좌이름, 성적), (강좌이름, 강의실)

-제3 정규화
  - 제2 정규화 진행한 테이블에 대해 이행적 종속을 없애도록 테이블을 분해
  - A->B, B->C가 성립할 때 A->C가 성립되는 것을 의미 
   (A당 한 가지의 B만 선택할 수 있다는 전제조건 하)
ex) 학생이 하나의 강좌만 듣는다고 할때 
(학생번호, 강좌이름, 수강료) -> (학생번호, 수강료), (학생번호, 강좌이름)

- BCNF 정규화
  - 제3 정규화를 진행한 테이블에 대해 모든 결정자가 후보키가 되도록 테이블을 분해
ex) 수업당 교수1명이 진행, 동명이인이 없다는 전제 하
(학생번호, 특강이름, 교수) ->(학생번호, 교수),(특강이름, 교수)
교수이름을 알면 특강이름이 무엇인지 알 수 있음 : 교수는 후보키가 아니었지만 테이블 분해해 후보키로 만듦

반정규화
- 데이터의 중복을 허용 => join 횟수를 줄여 성능 향상 목적
- why? 정규화가 진행될수록 테이블이 많아짐
  => 원하는 데이터를 조회하기 위해서 join을 많이 하게됨
  => 데이터가 많은 경우 join할 때 속도가 느려짐
*/